[
  
  {
    "title": "Easily host game servers with AMP",
    "url": "/posts/AmpGameserver/",
    "categories": "Homelab",
    "tags": "homelab, technology, game servers, proxmox",
    "date": "2024-09-09 05:00:00 +0100",
    





    
    "snippet": "What is AMPAMP (Application Management Panel) , developed by CubeCoders, is a powerful self-hosted control panel designed to make game server hosting hassle-free. With its intuitive user interface ...",
    "content": "What is AMPAMP (Application Management Panel) , developed by CubeCoders, is a powerful self-hosted control panel designed to make game server hosting hassle-free. With its intuitive user interface (UI), AMP takes the complexity out of creating and managing game servers, offering a streamlined experience for both beginners and advanced users.One of the key features of AMP is its ability to handle advanced tasks effortlessly. It supports automated backups, including the option to upload them to the cloud, and offers task scheduling for running CLI commands, checking for updates, and more. Additionally, the UI includes a built-in text editor with syntax highlighting, making it easy to edit configuration files directly from the browser.For those needing faster file transfers, AMP also comes with a built-in SFTP server. Each game server is isolated in its own instance, ensuring simpler backups and more efficient hardware management, making AMP an ideal solution for anyone looking to host and maintain game servers.Supported GamesAMP offers broad support for a variety of popular games. Below is a list of the main games AMP can manage:  Minecraft (Both Java and Bedrock editions)  Palworld  7 Days to Die  Satisfactory  ARK: Survival Evolved  Valheim  Rust  Counter-Strike: Global Offensive  Sons Of The Forest  Space Engineers  Factorio  Project Zomboid  V Rising  ARMA III  Conan Exiles  Terraria (Including tModLoader)  Garry’s Mod  Euro Truck Simulator 2Here’s the full list  of supported games.Beyond games, AMP also supports hosting NodeJS and Python applications, adding even more flexibility to this robust platform.Pricing StructureAMP currently offers 4 tiers (Editions). The Standard Edition, priced at a one-time payment of €9.50, is ideal for individuals or small groups who want to run a few game servers on a single system. With support for up to 5 app instances and 3 panel users, it offers a cost-effective entry-level solution with community support.The Professional Edition, available for €19 as a one-time payment, is tailored to power users who need to manage multiple systems or a larger number of game servers. It supports 15 app instances, allows for unlimited panel users, and enables multiple server management, making it a popular choice for more advanced users.For larger server networks or businesses, the Advanced Edition is a great fit. At €38 for a lifetime license, it supports up to 50 app instances and comes with additional features like in-game analytics, priority support, and custom branding. This edition is perfect for users managing large-scale game networks.Finally, the Enterprise Edition is designed for commercial resellers and large organizations. Starting at €19 per month, it offers flexible instance limits, automated deployment APIs, and integrations with WHMCS and WemX. This tier is ideal for businesses looking to provide AMP as a management platform for their customers.            Edition      Features      License Type      Price                  Standard Edition      - 5 App Instances - 3 Panel Users - Single-System Management - Community Support      One-time Payment      €9.50 EUR              Professional Edition      - 15 App Instances - Unlimited Panel Users - Multiple Server Management - Community Support      One-time Payment      €19 EUR              Advanced Edition      - 50 App Instances - In-game Analytics - Priority Support - Instance Deployment Templates - Custom Branding and SSO - All features from Professional Edition      One-time Payment      €38 EUR              Enterprise Edition      - Commercial Usage - Flexible Instance Limit - Automated Deployment API - WHMCS/WemX Integration - Centralized Instance Overlays - All features from Advanced Edition      Subscription      Starting at €19 EUR/month      InstallationIn this guide I will show the installation of AMP inside a proxmox LXC Container, so If your’e installing on bare metal or already have a container setup jump to the installing AMP sectionIf you prefer a visual guide here’s the official video guide from cubecoders.Creating the ContainerTo create the LXC container start of with the Ubuntu LXC script from PVE Helper-Scripts:bash -c \"$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/ubuntu.sh)\"Then run that script on the shell of your PVE node, after running the script you will be asked to use default settings or go into advanced mode and customize the install, I usually stick to the defaults and then edit what I need later on. Although are no official minimum requirements and AMP can run on systems such as raspberry pi even with 512mb of ram I still recommend that you give the LXC at least 2GB of ram, 10GB of storage and 2 cores. Please note that the previously mentioned specifications should be tunned for the your target game server (or servers).Despite AMP having it’s internal backup mechanisms I also recommend enabling auto backups inside of proxmox.After the container is created (and resources properly provisioned) set the locale to UTF8 by running the following commands, as root, inside the container:  localectl set-locale LANG=en_US.UTF-8  set LC_ALL=en_US.UTF-8  locale-genInstalling AMPStart off by logging in to the root user of your LXC (or server) and make sure the locale is set as UTF8 then run the following commandbash &lt;(wget -qO- getamp.sh)If everything else is well setup in your system the script should run as expected and present you with the option to choose the user credentials that you will use to login to the web interface. After the user is chosen you will be asked if you want to install docker to run instances isolated from your OS. I recommend you say yes to this option if:  Amp is running on bare metal  You plan on having multiple people accessing your instance  You want to run windows based applications.I should also note that installing docker might not be your best option if your system is resource limited because although small this option will cause a negative impact on performance.Since I’m already running AMP inside a proxmox LXC and I’m the only one who will administer this instance I will say no this option and run everything directly on the host.Then you’re going to be asked a few more questions on what software you want to run on this instance which you should reply based on your needs.To finish it off you will be asked if you want to enable HTTPS, this option is again highly dependent on your setup so if you want to directly expose AMP to the internet say ‘yes’, if you plan to only use AMP locally or run it behind a reverse proxy say ‘no’. Since I only want to access this AMP installation on my local network I will say ‘no’. After this questions you should be presented with a recap of your options and if everything looks good press ‘enter’ to continue or ‘ctrl+c’ to cancel.If you chose to continue AMP should proceed to install all the necessary components, the time the installation takes can vary depending on your system specifications and internet speed.After the installation is completed you should be presented with an URL to access your instance, copy that url (DO NOT USE CRTL+C) and paste it on your web browser to complete the setup.At the web UI log in to your previously created user, click ‘next’ and then paste in your license, after that click ‘next’ again. Next choose the Operation mode, for this installation I will choose standalone. Then choose what data you want you want to allow AMP to collect and click ‘next’. If everything is working as expected restart AMP and you should be all good to go.After AMP is restarted log back in to the web ui.Creating a instanceTo create an instance log in to the web UI and press the “Create Instance” button and then select the target application, for this guide I will select ‘Minecraft Java Edition’.After you’ve filled in your option click on ‘Create Instance’.Managing InstancesOn the ‘Instances’ menu click on the “Manage” button of the instance you want to manage, after that you should be taken to the instance’s management page. In this page you can view the status of the instance, console output, configure the server, see installed plugins, manage the instances file system and see/take backups. The previously mentioned options might change according to the game server you are running.Configuring automatic backupsTo configure automatic backups head to the ‘Schedule’ tab of the instance you want to backup, then click on add new trigger -&gt; Simple Time Interval and choose when you want your backups to take place, I will be choosing everyday at midnightAfter the trigger is added click the ‘Add New Task’ button, select the ‘Take a backup’ task from the dropdown menu and click on the ‘Add Task’ button.If you want to take more backups repeat the steps as many times as you want.Automatic backup managementIf you want to tweak the automatic backup deletion parameters go to the Configuration Tab and then to the Backups tab. Here you can change the Backup Replacement Policy (I recommend Delete single oldest), backup compression, global storage limits (how much space all the backups can take), single backup size limit (how much space can a backup use) and backup count limit (limits how many backups are kept if none of the previous limits have been exceeded).Community SupportCurrently AMP offers tree communities, discourse, discord and patreon. Although I never had the need to reach out for help in any of these communities from what I’ve seen they are very active and the people there are nice, knowledgeable and eager to help.ConclusionAMP is a powerful and user-friendly tool that simplifies game server hosting for both beginners and advanced users. It features a clean interface that makes managing, backing up, and scheduling tasks easy, removing the hassle from server management.AMP supports a wide range of popular games like Minecraft, ARK, and Rust, and can even handle NodeJS and Python applications, offering flexibility beyond gaming. With its built-in SFTP server, advanced file management, and automated backup options, it provides everything needed to run servers smoothly.The tiered pricing model caters to different users. The Standard Edition is perfect for individuals or small groups, while the Professional Edition is ideal for power users managing multiple servers. The Advanced Edition suits larger networks with additional features like in-game analytics, while the Enterprise Edition offers advanced tools for commercial resellers.Installation is straightforward, whether on bare metal or in containers like Proxmox, and AMP’s built-in Docker support ensures isolated and secure environments. Once set up, the user-friendly web interface makes it easy to manage instances, schedule backups, and monitor server performance.With a supportive and active community, AMP is a reliable solution that simplifies server hosting. Whether you’re a casual gamer or a commercial reseller, AMP’s flexibility and ease of use make it a valuable tool for managing game servers.In my personal experience over the past three years, AMP has been an indispensable tool, consistently performing well without any issues, and making my life as a game server host significantly easier. If you’re looking for a reliable, versatile, and scalable game server control panel, AMP is definitely worth considering."
  },
  
  {
    "title": "Historical Homelab Overview",
    "url": "/posts/HomelabOverview/",
    "categories": "Homelab",
    "tags": "homelab, technology",
    "date": "2024-07-24 05:00:00 +0100",
    





    
    "snippet": "BackstoryAround 2021 when I was interning as a software developer at a local company, I started to grow an interest in hosting my stuff, this came after hearing cool terms such as auto deploy, auto...",
    "content": "BackstoryAround 2021 when I was interning as a software developer at a local company, I started to grow an interest in hosting my stuff, this came after hearing cool terms such as auto deploy, auto testing, DevOps, plesk, and docker. After building up some courage, I started to ask some questions to the technology manager at the time there and he began to teach me about the use of multiple domains and reverse proxies, admin panels, and he even showed me some parts of the configurations that they were using at the company, this talk had me sold the idea of running my servers and self-hosting my services.My first hardwareI managed to get hold of three old machines (for free!). I got two HP ProDesk 400 G1s, these were fairly poorly specked since they were only serving as POS terminals. These machines had an Intel Pentium G3220 paired with 2GB of RAM and 500GB HDDs. The third machine was the more powerful one, it was a Dell Optiplex 390 specked with an Intel i3-2120 with 4GB of RAM and 1TB of HDD storage.The first upgradesBefore I did any configuration or first deployment, I knew right away that I needed to upgrade these machines, so I started by ordering an 8GB stick of ram out of AliExpress (budget was tight and It somehow it still works to this day).This 8GB stick ended up in the dell machine and I split the two 2GB sticks this machine had between the HP machines, therefore leaving the Dell with 8GB of ram and the HPs with 4GB each.I also knew that I wanted a NAS, since I wasn’t really queen on trusting my data on god knows how old hard drives, therefore, I got myself a Seagate IronWolf 2TB hdd to put my most important data on.The first deploymentAfter doing some research and more chatting to the previously mentioned technology manager I ended up going for Ubuntu Server as the operating system (OS) for these machines. Once I had the OS figured out I needed to set the rolls that these machines would play in this deployment, for that I needed a list of stuff that I wanted to run:  Nextcloud  Reverse-Proxy  Docker  Minecraft Server  Octoprint for remote 3D printer control  VPNSince the Dell had the most powerful cpu and more RAM I chose it as the main server of my homelab, therefore, it was tasked with running NGINX as a reverse proxy, docker, minecraft server and VPN server. One of my HP machines got the role of being a NAS, therefore, it ran Nextcloud (and dependencies such as MySql and Redis) and some SMB shares so that I could access files more easily from my computers. The other HP machine had the singular task of running octoprint (and respective webcam stream for printer monitoring) since I didn’t want any other task bottle-necking the weak pentium CPU.This adventure was paired with a lot of trials and errors since this was my first time using linux for more serious purposes. After a couple of days, I had everything set up the way I wanted. It was an absolute blast, I was learning so much new stuff, and the feeling of learning new things by myself and making it work as intended was out of this world.At this point, I still didn’t know about the existence of tools such as Nginx Proxy Manager and was managing my subdomains directly via the config files, which wasn’t that much fun.This left me with the following setup:Re-doing everythingPart of the homelab experience is gaining more knowledge and finding better ways to do the same things. After a year of usage and adding more services to the mix, problems started to occur, drives filling up, managing the nginx config file and ssl certificates manually became increasingly more difficult to manage.To solve the hard drive filling up I decided to use linuxe’s Logical Volume Manager (LVM) which allowed me to combine multiple disks of different capacities and use them for a single big disk. In this case, I combined the space 500GB HDD with the 1TB one present in the Dell machine. In hindsight and due to the unknown past of my disks, I should have used a tool like mergerfs which wouldn’t leave me with a total loss of data if a single drive failed.The need to use LVM expand my disk space led me to just re-installing everything and doing some things better. During this major change, I also ditched the ‘raw’ use of nginx and certbot and started to use nginx proxy manager which made managing domains a breeze.Hosting my mediaEarly 2023 I stared to gain interest in hosting my own media, during this phase I tested out services like plex and jellyfin. I ended up settling for jellyfin since I wanted to use as much Open-source software as possible, another feature of jellyfin that made it even more appealing was the ability to stream live television. To make live tv and recordings available on my jellyfin, I used Tvheadend in combination with two DTV tuners. Contrary to IPTV and other digital services, most of the usb DTV tuners can only tune in to one channel at the time which makes it impossible to watch a chanel and record another ate the same time.My dvd and Blu-ray collection was of a severe size. Therefore, I also found the need to increase my HDD capacity to suit these needs. Once again LVM came in handy since I managed to find an old 2TB CCTV HDD for cheap and it made the perfect candidate for expanding the storage of server.The server tasked to handle all these tasks was the Dell optiplex, which struggled to keep up transcoding tasks and tv recordings. I must admit that I got superlucky with the use of LVM and a mix of disks with varying ages and varying working hours especially since I just added the previously mentioned CCTV HDD to my boot drive pool.New serverAfter around two months of highly stressing my Dell optiplex and losing my mind to transcodes hanging and countless streaming errors due to the lack of adequate compute power, I decided that I needed an upgrade.I started to browse the local used market (which is not very good in Portugal) and soon realized that if I wanted tons of computing power for cheap, I would have to go for an old enterprise server.I ended up settling for a used dell r620. This old beast came with two Intel Xeons E5-2670, 64GB of DDR3 ram, two 900GB sas HDDs and dual redundant PSUs. Compared to my old machines this thing was a powerhouse but a new problem appeared. This server’s chassis came configured with option to support 8 2,5” disks, but all my existing media is on 3.5” disks. To tackle this problem, I ended up moving all the drives to the optiplex machine and used that to server all my media as smb network shares.To avoid having to set everything up again, I decided to clone the drive from optiplex server to an SSD and use that as a boot disk to my new r620 server.This left me with the following setup: VirtualizationMore recently, I embarked on the journey of using Proxmox, and I’m gradually migrating all my services and applications to LXC containers. This shift has introduced new efficiencies, reduced operational costs and added capabilities to my homelab setup. In a future post, I’ll delve deeper into this transition, exploring the benefits, challenges, and detailed steps involved in moving to Proxmox and LXC containers.ConclusionIn conclusion, the journey of building and evolving my homelab has been an incredible learning experience, marked by trials, errors, and many upgrades. Starting from basic setups with old, underpowered hardware, and gradually expanding my systems to meet my needs.Thanks for reading and hope to find you around. Feel free to contact me through my social media if you want to discuss any of the previous topics."
  },
  
  {
    "title": "About Me",
    "url": "/posts/about-me/",
    "categories": "Blogging, Personal",
    "tags": "personal",
    "date": "2024-07-20 17:34:00 +0100",
    





    
    "snippet": "Hi My name is Diogo CardosoDeveloper and MakerI’ve been codig for around 5 years. I’m a tech addict, so if it computes it interests me. Currently studying Computer Engineering @IPLeiria  🌍  I’m bas...",
    "content": "Hi My name is Diogo CardosoDeveloper and MakerI’ve been codig for around 5 years. I’m a tech addict, so if it computes it interests me. Currently studying Computer Engineering @IPLeiria  🌍  I’m based in Leiria, Portugal  ✉️  You can contact me at diogoocardoso@gmail.com  🤝  I’m open to collaborating on Android Projects and smart home projectsSkills  Socials   Support Me"
  },
  
  {
    "title": "Aria - Your Smart Home Platform",
    "url": "/posts/ProfessionalCourseFinalProject/",
    "categories": "Projects",
    "tags": "smart home, technology, arduino, micro-controllers",
    "date": "2021-07-06 05:00:00 +0100",
    





    
    "snippet": "Project BackstoryAround january 2021 I started to get interested in home automation systems, which led me to doing research on platforms like home assistant and hubitat.One of the requirements to f...",
    "content": "Project BackstoryAround january 2021 I started to get interested in home automation systems, which led me to doing research on platforms like home assistant and hubitat.One of the requirements to finish a professional course in Portugal is the development of a final project, this project must be developed in the final year in roughly three months.Once was time to pick a topic I immediately remembered my research about the previously mentioned home automation platforms, I immediately thought ‘can I build something like this?’Fortunately, one of the topics on the list was smart home systems, and I promptly chose it.RequirementsAlthough we had freedom to use whatever tech stack we pleased, the school set the following requirements:  If a web-based front end was used, it had to use PHP  A relational database must be the primary method of providing persistence. (preferably MySql)  The database must contain at least three tables and all types of relationships.ObjectivesAfter looking at the features of existing home automation systems, I made a list of features that I wanted to implement:  Light control  Air conditioning system  Gas leakage sensing  Web radio streaming  Video doorbell system  Remote garage door opening  Control over voice assistantBuilding the ModulesAs a base for all the modules I used ESP 8266 and ESP32 micro-controllers were used, I picked those models because of their low cost, good performance and Wi-Fi capabilities.Since all modules required WiFi connectivity and communications trough MQTT I decided to make a base firmware file that handled this common behavior, this common file would then be extended my module specific control libraries. This base library also provided a web UI which could be used to change WiFi and MQTT credentials.To make developing the software easier I chose to use Vscode as my IDE alongside the PlatformIO extension. This extension makes writing and deploying code to the micro-controllers a breeze since it allows the use of Vscode great code completions and it features a library manager that allows the easy inclusion of external libraries.This also allows the compilation and uploading of code to the micro-controllers via CLI (this will come in handy in the future).Light controlTo reduce the number of micro-controllers needed I decided to run all the lights to a central module, this module used a Wemos D1 Mini as the micro-controller paired with mosfets to allow the use of high power LEDs. Below you can find the module schematic as well as a fully assembled protoboard (excuse the not-so professional soldering job 🤪).Light control PCBModule Schematic            Top View      Bottom View                              Air conditioning systemIn order to simulate the air conditioning system two fans and a temperature and humidity sensor were used. The sensor chosen was an BMP 180 due to it’s good response time, accuracy and low cost. The two previously mentioned fans were used to simulate the airflow on the indoor/outdoor ac units, to give better realism this fans were inclosed on 3D printed enclosures that looked like AC indoor/outdoor units. This module also allowed the display of current temperature and humidity readings on the UI.            Enclosure 3D View      Module Schematic                                          Temperature and humidity sensor      Indoor/outdoor units                              The change of desired temperature in a room is made through an intuitive click on a temperature gauge on the user interface (UI).User interface where temperature can be changedGas leakage sensingOne of the most important things a home can (and should have) is a gas leakage sensor (if gas is used) in order to detect and warn you about a gas leak. In order to achieve this a MQ-5 gas sensor was used in conjunction with a buzzer to provide an audible warning. The sensor was places inside a 3D printed kitchen cabinet. An event was also published via MQTT so that a warning could be displayed on the UI, this event could also be used in the future to add future actions.            Gas sensor      Protoboard                              Web radio streamingAnother feature that’s nice to have in a smart home is a central radio system, to achieve this a Vs1053 MP3 decoder board in conjunction with an esp32 micro controller. A small speaker was placed in a 3D printed enclosure to provide the sound. The target radio station (MP3 stream) and volume controls where provided via MQTT messages.            Enclosure 3D View      Protoboard                              Module SchematicVideo doorbell systemThis was one of the most challenging parts of the project since it required lots of new techniques both in the hardware and software side. The micro controller chosen was a esp32 cam, OLED display, photoresistor and high power LED (built in to micro-controller) for night time illumination. The OLED screen was used to display the current time and inform the person ringing it if it was on do-not disturb mode or not. If the do not disturb mode was enabled no sound would be produced inside of the home. This module would send an MQTT message each time the doorbell was rang. To provide real time video on the dashboard FFmpeg was used to re stream via HTTPS the local video from the ESP.            Exploded 3D View      Assembled 3D view                              Remote garage door openingIn order to simulate the opening and closing of a gate a 3D printed gate was used, this assembly featured and electric motor to move the gate and two end-stops to provide feedback of the gate’s state (in case it was moved my hand). To view and control the gate a card was shown on the UI.            3D View      Module Schematic                              To control the direction of the DC motor two relays were used, these relays would invert the polarity of the current running trough the motor which changed the gate’s direction. The gate was attached to a threaded rod and the motion was transferred via a nut inclosed in a gear.Below you can find a close up look at previously the mentioned system.Gate motion system close-upControl over voice assistantIn order to provide this project with voice control google’s dialogflow to provide a custom google assistant integration. Since this was an academic project only a few interactions (intents) were developed. ‘getTemperatureIntent’ was used to obtain the temperature in a specified room, ‘turnLightOffIntent’ and ‘turnLightOnIntent’ were used to control lights. Below you can find a listing of all the created intents and example phrases.            DialogFlow Intents      ‘getTemperatureIntent’ Phrases                              The highlighted word is the placeholder for the variable, in this case the name of the room.In order to facilitate the development of the software that would handle the requests coming from google assistant a framework was used. Jovo is an open source framework  that allows easier development of apps to run on voice assistants. This framework ran a node js webserver that gathered the data from the smart home’s api and provided responses to google assistant. To be able to provide a secure url to dialogflow’s actions an external HTTPS connection was needed, which required port-forwarding. The final presentation had to be performed on a network that didn’t allow port forwarding to the exterior.he final presentation had to be performed on a network that didn’t allow port forwarding to the exterior.Since the project’s final presentation was made in a network that didn’t allow port-forwarding ngrok was used to create an secure tunnel.Google assistant screenshotThe backendTo build this project’s backend node js and express were used. As previously mentioned the database implemented had to be MySql and it had the following tables:Database diagramThe ‘home_device’ table contains information about devices (such as light bulbs, power sockets, and gates) capable of performing actions. The ‘home_device_value’ table logs state changes of these devices and registers the user if the change is made through the smart home platform. ‘Home_device_type’ and ‘sensor_type’ tables maintain records of all existing device and sensor types along with their respective firmware files. ‘config_table’ stores the basic configurations to be uploaded to the sensors/devices.An api was also created to allow the development of external applications. The previously mentioned google assistant integration was built using this api.Allowing run-time addition of sensors and actuatorsTo give the user the ability to add new sensors/actuators and not have to manually upload firmware to the ESPs, a function was added that after the insertion of the device trough the UI it would request the user to plug the device into the computer running the backend (in this case a raspberry pi). After the user confirmed the device was plugged in, the node would launch a shell command calling PlatformIO to upload via CLI. Before uploading the code the backend would also update the config files accordingly.A house to the hardwareTo finalize this effort a miniature house was made to house all the components.A look back on the projectLooking back at this project I had a ton of fun putting this all together. This was an awesome learning experience as I got the mix the things that I love doing the most, building hardware, writing software and 3D printing. All the issues found and solutions created made me a better developer (in my opinion)."
  }
  
]

